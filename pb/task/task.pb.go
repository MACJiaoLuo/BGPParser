// Code generated by protoc-gen-go. DO NOT EDIT.
// source: task.proto

package task

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FilePath struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FilePath) Reset()         { *m = FilePath{} }
func (m *FilePath) String() string { return proto.CompactTextString(m) }
func (*FilePath) ProtoMessage()    {}
func (*FilePath) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce5d8dd45b4a91ff, []int{0}
}

func (m *FilePath) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FilePath.Unmarshal(m, b)
}
func (m *FilePath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FilePath.Marshal(b, m, deterministic)
}
func (m *FilePath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilePath.Merge(m, src)
}
func (m *FilePath) XXX_Size() int {
	return xxx_messageInfo_FilePath.Size(m)
}
func (m *FilePath) XXX_DiscardUnknown() {
	xxx_messageInfo_FilePath.DiscardUnknown(m)
}

var xxx_messageInfo_FilePath proto.InternalMessageInfo

func (m *FilePath) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type TaskReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskReply) Reset()         { *m = TaskReply{} }
func (m *TaskReply) String() string { return proto.CompactTextString(m) }
func (*TaskReply) ProtoMessage()    {}
func (*TaskReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce5d8dd45b4a91ff, []int{1}
}

func (m *TaskReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskReply.Unmarshal(m, b)
}
func (m *TaskReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskReply.Marshal(b, m, deterministic)
}
func (m *TaskReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskReply.Merge(m, src)
}
func (m *TaskReply) XXX_Size() int {
	return xxx_messageInfo_TaskReply.Size(m)
}
func (m *TaskReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskReply.DiscardUnknown(m)
}

var xxx_messageInfo_TaskReply proto.InternalMessageInfo

func (m *TaskReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*FilePath)(nil), "task.FilePath")
	proto.RegisterType((*TaskReply)(nil), "task.TaskReply")
}

func init() { proto.RegisterFile("task.proto", fileDescriptor_ce5d8dd45b4a91ff) }

var fileDescriptor_ce5d8dd45b4a91ff = []byte{
	// 150 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x49, 0x2c, 0xce,
	0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0x95, 0xe4, 0xb8, 0x38, 0xdc, 0x32,
	0x73, 0x52, 0x03, 0x12, 0x4b, 0x32, 0x84, 0x84, 0xb8, 0x58, 0x0a, 0x12, 0x4b, 0x32, 0x24, 0x18,
	0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x25, 0x55, 0x2e, 0xce, 0x90, 0xc4, 0xe2, 0xec, 0xa0,
	0xd4, 0x82, 0x9c, 0x4a, 0x21, 0x09, 0x2e, 0xf6, 0xdc, 0xd4, 0xe2, 0xe2, 0xc4, 0xf4, 0x54, 0xa8,
	0x1a, 0x18, 0xd7, 0x28, 0x9f, 0x8b, 0xd3, 0xc9, 0x3d, 0x00, 0xa4, 0x32, 0xb5, 0x48, 0xc8, 0x80,
	0x8b, 0xdb, 0x31, 0x25, 0x25, 0x28, 0xb1, 0x3c, 0x20, 0xb1, 0xa8, 0x38, 0x55, 0x88, 0x4f, 0x0f,
	0x6c, 0x2b, 0xcc, 0x1a, 0x29, 0x7e, 0x08, 0x1f, 0x6e, 0xac, 0x12, 0x03, 0x54, 0x87, 0x93, 0x7b,
	0x00, 0xb1, 0x3a, 0x92, 0xd8, 0xc0, 0x9e, 0x30, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x0d, 0x50,
	0xa2, 0x63, 0xd2, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BGPTaskerClient is the client API for BGPTasker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BGPTaskerClient interface {
	AddRawParse(ctx context.Context, in *FilePath, opts ...grpc.CallOption) (*TaskReply, error)
	AddBGPParse(ctx context.Context, in *FilePath, opts ...grpc.CallOption) (*TaskReply, error)
}

type bGPTaskerClient struct {
	cc grpc.ClientConnInterface
}

func NewBGPTaskerClient(cc grpc.ClientConnInterface) BGPTaskerClient {
	return &bGPTaskerClient{cc}
}

func (c *bGPTaskerClient) AddRawParse(ctx context.Context, in *FilePath, opts ...grpc.CallOption) (*TaskReply, error) {
	out := new(TaskReply)
	err := c.cc.Invoke(ctx, "/task.BGPTasker/AddRawParse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bGPTaskerClient) AddBGPParse(ctx context.Context, in *FilePath, opts ...grpc.CallOption) (*TaskReply, error) {
	out := new(TaskReply)
	err := c.cc.Invoke(ctx, "/task.BGPTasker/AddBGPParse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BGPTaskerServer is the server API for BGPTasker service.
type BGPTaskerServer interface {
	AddRawParse(context.Context, *FilePath) (*TaskReply, error)
	AddBGPParse(context.Context, *FilePath) (*TaskReply, error)
}

// UnimplementedBGPTaskerServer can be embedded to have forward compatible implementations.
type UnimplementedBGPTaskerServer struct {
}

func (*UnimplementedBGPTaskerServer) AddRawParse(ctx context.Context, req *FilePath) (*TaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRawParse not implemented")
}
func (*UnimplementedBGPTaskerServer) AddBGPParse(ctx context.Context, req *FilePath) (*TaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBGPParse not implemented")
}

func RegisterBGPTaskerServer(s *grpc.Server, srv BGPTaskerServer) {
	s.RegisterService(&_BGPTasker_serviceDesc, srv)
}

func _BGPTasker_AddRawParse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilePath)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BGPTaskerServer).AddRawParse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.BGPTasker/AddRawParse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BGPTaskerServer).AddRawParse(ctx, req.(*FilePath))
	}
	return interceptor(ctx, in, info, handler)
}

func _BGPTasker_AddBGPParse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilePath)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BGPTaskerServer).AddBGPParse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.BGPTasker/AddBGPParse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BGPTaskerServer).AddBGPParse(ctx, req.(*FilePath))
	}
	return interceptor(ctx, in, info, handler)
}

var _BGPTasker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "task.BGPTasker",
	HandlerType: (*BGPTaskerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRawParse",
			Handler:    _BGPTasker_AddRawParse_Handler,
		},
		{
			MethodName: "AddBGPParse",
			Handler:    _BGPTasker_AddBGPParse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task.proto",
}
